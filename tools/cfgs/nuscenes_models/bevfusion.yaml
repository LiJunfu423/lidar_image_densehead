# CLASS_NAMES: ['bicycle', 'bicycle_rack', 'Cyclist', 'Pedestrian', 'rider', 'Car', 'truck']#7
CLASS_NAMES: ['Car', 'Pedestrian', 'Cyclist']#3


DATA_CONFIG:
    # _BASE_CONFIG_: cfgs/dataset_configs/nuscenes_dataset.yaml
    _BASE_CONFIG_: /home/junfu/data/lidar_image/OpenPCDet/tools/cfgs/dataset_configs/kitti_dataset.yaml
    # POINT_CLOUD_RANGE: [-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]
    POINT_CLOUD_RANGE: [0, -25.6, -3, 51.2, 25.6, 2]    #（x_min,y_min,z_min,x,y,z)

    CAMERA_CONFIG:
        USE_CAMERA: True
        IMAGE:
            FINAL_DIM: [256,704]
            RESIZE_LIM_TRAIN: [0.40, 0.60]
            RESIZE_LIM_TEST: [0.48, 0.48]

    GET_ITEM_LIST: ["points", "images", "calib_matricies"]
    # CAMERA_CONFIG:
    #     USE_CAMERA: True
    #     IMAGE:
    #         FINAL_DIM: [256,704]
    #         RESIZE_LIM_TRAIN: [0.38, 0.55]
    #         RESIZE_LIM_TEST: [0.48, 0.48]
    # DATA_AUGMENTOR:
    #     DISABLE_AUG_LIST: ['placeholder']
    #     AUG_CONFIG_LIST:
    #         - NAME: random_world_flip
    #           ALONG_AXIS_LIST: ['x', 'y']

    #         - NAME: random_world_rotation
    #           WORLD_ROT_ANGLE: [-0.78539816, 0.78539816]

    #         - NAME: random_world_scaling
    #           WORLD_SCALE_RANGE: [0.9, 1.1]

    #         - NAME: random_world_translation
    #           NOISE_TRANSLATE_STD: [0.5, 0.5, 0.5]
            
    #         - NAME: imgaug
    #           ROT_LIM: [-5.4, 5.4]
    #           RAND_FLIP: True
    DATA_AUGMENTOR:
        DISABLE_AUG_LIST: ['random_world_rotation', 'gt_sampling']  #random_world_rotation在随机选择的角度上旋转点云或图像
        AUG_CONFIG_LIST:
            # - NAME: gt_sampling
            #   USE_ROAD_PLANE: False
            #   DB_INFO_PATH:
            #     - kitti_dbinfos_train.pkl
            #   PREPARE: {}
            #   SAMPLE_GROUPS: ['Car:30','Pedestrian:20', 'Cyclist:15','rider:20','bicycle:10','bicycle_rack:20','truck:40']
            #   NUM_POINT_FEATURES: 4
            #   DATABASE_WITH_FAKELIDAR: False
            #   REMOVE_EXTRA_WIDTH: [0.0, 0.0, 0.0]
            #   LIMIT_WHOLE_SCENE: False

            - NAME: random_world_flip   #在随机选择的轴上翻转点云或图像
              ALONG_AXIS_LIST: ['x']

            - NAME: random_world_scaling    #在随机选择的尺度上缩放点云或图像
              WORLD_SCALE_RANGE: [0.95, 1.05]

          #   - NAME: gt_sampling   
          # USE_ROAD_PLANE: True
          # DB_INFO_PATH:
          #     - kitti_dbinfos_train.pkl
          # PREPARE: {
          #    filter_by_min_points: ['Car:5', 'Pedestrian:5', 'Cyclist:5'],
          #    filter_by_difficulty: [-1],
          # }

    DATA_PROCESSOR:
        - NAME: mask_points_and_boxes_outside_range
          REMOVE_OUTSIDE_BOXES: True

        - NAME: shuffle_points
          SHUFFLE_ENABLED: {
            'train': True,
            'test': False
          }

        - NAME: transform_points_to_voxels
          VOXEL_SIZE: [0.05, 0.05, 0.1]
          MAX_POINTS_PER_VOXEL: 5
          MAX_NUMBER_OF_VOXELS: {
            'train': 16000,
            'test': 40000
          }

        - NAME: image_calibrate
        

        #应该注释
        # - NAME: image_normalize
        #   mean: [0.485, 0.456, 0.406]
        #   std: [0.229, 0.224, 0.225]


MODEL:
    NAME: BevFusion

    VFE:
        NAME: MeanVFE

    BACKBONE_3D:    #torch.Size([9, 128, 2, 128, 128])
        NAME: VoxelResBackBone8x
        USE_BIAS: False

    MAP_TO_BEV:
        NAME: HeightCompression
        NUM_BEV_FEATURES: 256   #Lidar点云生成的BEV特征图通道数量



    
    IMAGE_BACKBONE:
        NAME: SwinTransformer   #输出三个([9, 192, 32, 88])，([9, 384, 16, 44])，([9, 768, 8, 22])
        EMBED_DIMS: 96
        DEPTHS: [2, 2, 6, 2]
        NUM_HEADS: [3, 6, 12, 24]
        WINDOW_SIZE: 7
        MLP_RATIO: 4
        DROP_RATE: 0.
        ATTN_DROP_RATE: 0.
        DROP_PATH_RATE: 0.2
        PATCH_NORM: True
        OUT_INDICES: [1, 2, 3]
        WITH_CP: False
        CONVERT_WEIGHTS: True
        INIT_CFG:
            type: Pretrained
            checkpoint: swint-nuimages-pretrained.pth
    
    NECK:
        NAME: GeneralizedLSSFPN     #[9, 256, 32, 88] & [9, 256, 16, 44]
        IN_CHANNELS: [192, 384, 768]
        OUT_CHANNELS: 256
        START_LEVEL: 0
        END_LEVEL: -1
        NUM_OUTS: 3
    
    VTRANSFORM:
        NAME: DepthLSSTransform
        IMAGE_SIZE: [256, 704]
        IN_CHANNEL: 256
        OUT_CHANNEL: 80
        FEATURE_SIZE: [32, 88]
        #点云集合不一样，所以范围不同
        #XBOUND: [-54.0, 54.0, 0.3]
        XBOUND: [0.0, 51.2, 0.08]
        #YBOUND: [-54.0, 54.0, 0.3]
        YBOUND: [-25.6, 25.6, 0.08]
        ZBOUND: [-3.0, 2.0, 5.0]
        DBOUND: [1.0, 60.0, 0.5]
        DOWNSAMPLE: 2
    
    FUSER:
        NAME: ConvFuser
        IN_CHANNEL: 336
        OUT_CHANNEL: 256

    
    BACKBONE_2D:
        NAME: BaseBEVBackbone
        LAYER_NUMS: [5, 5]
        LAYER_STRIDES: [1, 2]
        NUM_FILTERS: [128, 256]
        # UPSAMPLE_STRIDES: [1, 2]
        UPSAMPLE_STRIDES: [4, 8]
        NUM_UPSAMPLE_FILTERS: [256, 256]
        USE_CONV_FOR_NO_STRIDE: True

    # BACKBONE_2D:
    #     NAME: BaseBEVBackbone
    #     LAYER_NUMS: [3, 5, 5]
    #     LAYER_STRIDES: [2, 2, 2]
    #     NUM_FILTERS: [64, 128, 256]
    #     UPSAMPLE_STRIDES: [1, 2, 4]
    #     NUM_UPSAMPLE_FILTERS: [128, 128, 128]


    # DENSE_HEAD:
    #     CLASS_AGNOSTIC: False
    #     NAME: TransFusionHead

    #     USE_BIAS_BEFORE_NORM: False

    #     NUM_PROPOSALS: 200
    #     HIDDEN_CHANNEL: 128
    #     NUM_CLASSES: 3 #要进行多少个类别的分类
    #     NUM_HEADS: 16
    #     NMS_KERNEL_SIZE: 3
    #     FFN_CHANNEL: 256
    #     DROPOUT: 0.1
    #     BN_MOMENTUM: 0.1
    #     ACTIVATION: relu

    #     NUM_HM_CONV: 2
    #     SEPARATE_HEAD_CFG:
    #         HEAD_ORDER: ['center', 'height', 'dim', 'rot', 'vel']
    #         HEAD_DICT: {
    #             'center': {'out_channels': 2, 'num_conv': 2},
    #             'height': {'out_channels': 1, 'num_conv': 2},
    #             'dim': {'out_channels': 3, 'num_conv': 2},
    #             'rot': {'out_channels': 2, 'num_conv': 2},
    #             'vel': {'out_channels': 2, 'num_conv': 2},
    #         }

    #     TARGET_ASSIGNER_CONFIG:
    #         FEATURE_MAP_STRIDE: 8 #精确的目标分配
    #         DATASET: nuScenes
    #         GAUSSIAN_OVERLAP: 0.1
    #         MIN_RADIUS: 2
    #         HUNGARIAN_ASSIGNER:

    #             cls_cost: {'gamma': 2.0, 'alpha': 0.25, 'weight': 0.15}
    #             reg_cost: {'weight': 0.25}
    #             iou_cost: {'weight': 0.25}

        
    #     LOSS_CONFIG:
    #         LOSS_WEIGHTS: {
    #                 'cls_weight': 1.0,
    #                 'bbox_weight': 0.25,
    #                 # 'bbox_weight': 2.0,
    #                 'hm_weight': 1.0,
    #                 'code_weights': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2]
    #             }
    #         LOSS_CLS:
    #             use_sigmoid: True
    #             gamma: 2.0
    #             alpha: 0.25
          
    #     POST_PROCESSING:
    #         SCORE_THRESH: 0.0
    #         POST_CENTER_RANGE: [0, -25.6, -3, 51.2, 25.6, 2]
    DENSE_HEAD:
        
        CLASS_AGNOSTIC: False
        NAME: AnchorHeadSingle
        USE_DIRECTION_CLASSIFIER: True
        DIR_OFFSET: 0.78539
        DIR_LIMIT_OFFSET: 0.0
        NUM_DIR_BINS: 2

        ANCHOR_GENERATOR_CONFIG: [
            {
                'class_name': 'Car',
                'anchor_sizes': [[3.9, 1.6, 1.56]],
                'anchor_rotations': [0, 1.57],
                'anchor_bottom_heights': [-1.78],
                'align_center': False,
                'feature_map_stride': 2,
                'matched_threshold': 0.6,
                'unmatched_threshold': 0.45
            },
            {
                'class_name': 'Pedestrian',
                'anchor_sizes': [[0.8, 0.6, 1.73]],
                'anchor_rotations': [0, 1.57],
                'anchor_bottom_heights': [-0.6],
                'align_center': False,
                'feature_map_stride': 2,
                'matched_threshold': 0.5,
                'unmatched_threshold': 0.35
            },
            {
                'class_name': 'Cyclist',
                'anchor_sizes': [[1.76, 0.6, 1.73]],
                'anchor_rotations': [0, 1.57],
                'anchor_bottom_heights': [-0.6],
                'align_center': False,
                'feature_map_stride': 2,
                'matched_threshold': 0.5,
                'unmatched_threshold': 0.35
            }
            # ,
            # {
            #     'class_name': 'bicycle',
            #     'anchor_sizes': [[1.76, 0.63, 1.44]],
            #     'anchor_rotations': [0, 1.57],
            #     'anchor_bottom_heights': [-1.07],
            #     'align_center': False,
            #     'feature_map_stride': 2,
            #     'matched_threshold': 0.5,
            #     # 'unmatched_threshold': 0.35
            #     'unmatched_threshold': 0.45

            # },
            # {
            #     'class_name': 'bicycle_rack',
            #     'anchor_sizes': [[0.9, 1.7, 2.6]],
            #     'anchor_rotations': [0, 1.57],
            #     'anchor_bottom_heights': [-1.33],
            #     'align_center': False,
            #     'feature_map_stride': 2,
            #     'matched_threshold': 0.55,
            #     'unmatched_threshold': 0.4
            # },
            # {
            #     'class_name': 'rider',
            #     'anchor_sizes': [[1.5, 0.7, 0.73]],
            #     'anchor_rotations': [0, 1.57],
            #     'anchor_bottom_heights': [-1.085],
            #     'align_center': False,
            #     'feature_map_stride': 2,
            #     'matched_threshold': 0.5,
            #     'unmatched_threshold': 0.4
            # },
            # {
            #     'class_name': 'truck',
            #     'anchor_sizes': [[6.93, 2.51, 2.84]],
            #     'anchor_rotations': [0, 1.57],
            #     'anchor_bottom_heights': [-0.6],
            #     'align_center': False,
            #     'feature_map_stride': 2,
            #     'matched_threshold': 0.5,
            #     'unmatched_threshold': 0.45
            # }
        ]

        TARGET_ASSIGNER_CONFIG:
            NAME: AxisAlignedTargetAssigner
            POS_FRACTION: -1.0
            SAMPLE_SIZE: 512
            NORM_BY_NUM_EXAMPLES: False
            MATCH_HEIGHT: False
            BOX_CODER: ResidualCoder

        LOSS_CONFIG:
            LOSS_WEIGHTS: {
                'cls_weight': 1.0,
                'loc_weight': 2.0,
                'dir_weight': 0.2,
                'code_weights': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
            }

    POST_PROCESSING:
        RECALL_THRESH_LIST: [0.3, 0.5, 0.7]
        SCORE_THRESH: 0.1
        OUTPUT_RAW_SCORE: False

        EVAL_METRIC: kitti

        NMS_CONFIG:
            MULTI_CLASSES_NMS: False
            NMS_TYPE: nms_gpu
            NMS_THRESH: 0.01
            NMS_PRE_MAXSIZE: 4096
            NMS_POST_MAXSIZE: 500


#训练参数
OPTIMIZATION:
    BATCH_SIZE_PER_GPU: 4
    NUM_EPOCHS: 60

    OPTIMIZER: adam_cosineanneal
    LR: 0.01
    WEIGHT_DECAY: 0.01
    MOMENTUM: 0.9
    BETAS: [0.9, 0.999]

    MOMS: [0.9, 0.8052631]
    PCT_START: 0.4
    WARMUP_ITER: 1200

    DECAY_STEP_LIST: [40, 50]
    LR_WARMUP: False
    WARMUP_EPOCH: 1

    GRAD_NORM_CLIP: 35

    LOSS_SCALE_FP16: 32
  